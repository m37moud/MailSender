#!/usr/bin/env node

/**
 * Build script to inject environment variables into Chrome extension files
 */

const fs = require('fs');
const path = require('path');
require('dotenv').config();

/**
 * Replace environment variables in manifest.json
 */
function buildManifest() {
  const manifestTemplate = {
    "manifest_version": 3,
    "name": process.env.EXTENSION_NAME || "Gmail API Email Sender",
    "version": process.env.EXTENSION_VERSION || "3.0",
    "description": process.env.EXTENSION_DESCRIPTION || "Send emails directly via Gmail API with attachments",
    "permissions": [
      "activeTab",
      "storage",
      "identity"
    ],
    "host_permissions": [
      "https://www.googleapis.com/*"
    ],
    "action": {
      "default_popup": "popup.html",
      "default_title": process.env.EXTENSION_NAME || "Gmail API Email Sender"
    },
    "oauth2": {
      "client_id": process.env.GOOGLE_CLIENT_ID || "",
      "scopes": [
        "https://www.googleapis.com/auth/gmail.send"
      ]
    }
  };

  // Validate required environment variables
  if (!process.env.GOOGLE_CLIENT_ID) {
    console.error('Error: GOOGLE_CLIENT_ID is required in .env file');
    process.exit(1);
  }

  fs.writeFileSync('manifest.json', JSON.stringify(manifestTemplate, null, 2));
  console.log('‚úÖ manifest.json generated with environment variables');
}

/**
 * Create a config file with environment variables for the extension
 */
function buildConfig() {
  const configContent = `
// Auto-generated configuration from environment variables
// Do not edit this file directly - edit .env instead

window.ENV_CONFIG = {
  GOOGLE_CLIENT_ID: "${process.env.GOOGLE_CLIENT_ID || ''}",
  EXTENSION_NAME: "${process.env.EXTENSION_NAME || 'Gmail API Email Sender'}",
  EXTENSION_VERSION: "${process.env.EXTENSION_VERSION || '3.0'}",
  DEFAULT_EMAIL_SUBJECT: "${process.env.DEFAULT_EMAIL_SUBJECT || 'Android Developer Position'}",
  DEFAULT_SENDER_NAME: "${process.env.DEFAULT_SENDER_NAME || ''}",
  DEFAULT_SENDER_PHONE: "${process.env.DEFAULT_SENDER_PHONE || ''}"
};
`;

  fs.writeFileSync('config.js', configContent);
  console.log('‚úÖ config.js generated with environment variables');
}

/**
 * Copy files to root for Chrome extension
 */
function copyFiles() {
  // Copy HTML files to root
  if (fs.existsSync('src/popup/popup.html')) {
    fs.copyFileSync('src/popup/popup.html', 'popup.html');
  }
  
  if (fs.existsSync('src/settings/settings.html')) {
    fs.copyFileSync('src/settings/settings.html', 'settings.html');
  }
  
  console.log('‚úÖ Files copied to root directory');
}

/**
 * Main build function
 */
function build() {
  console.log('üî® Building Chrome extension with environment variables...');
  
  try {
    buildManifest();
    buildConfig();
    copyFiles();
    console.log('‚úÖ Build completed successfully!');
  } catch (error) {
    console.error('‚ùå Build failed:', error.message);
    process.exit(1);
  }
}

// Run build if this script is executed directly
if (require.main === module) {
  build();
}

module.exports = { build, buildManifest, buildConfig };